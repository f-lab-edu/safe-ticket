name: Deploy to EC2

on:
  push:
    branches:
      - feature/20-add-cicd-pipeline

jobs:
  get-ec2-info:
    runs-on: ubuntu-latest

    steps:
      - name: AWS 자격 증명 세팅
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Ticket 서버 EC2 Public IP 가져오기
        id: ticket-server-ec2-info
        run: |
          TICKET_SERVER_PUBLIC_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=ticket-server" "Name=instance-state-name,Values=running" \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)

          echo "TICKET_SERVER_PUBLIC_IP=$TICKET_SERVER_PUBLIC_IP" >> $GITHUB_ENV
          echo "::set-output name=ticket_server_public_ip::$TICKET_SERVER_PUBLIC_IP"

      - name: Monitoring 서버 EC2 Public IP 가져오기
        id: monitoring-server-ec2-info
        run: |
          MONITORING_PUBLIC_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=monitoring-server" "Name=instance-state-name,Values=running" \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)

          echo "MONITORING_PUBLIC_IP=$MONITORING_PUBLIC_IP" >> $GITHUB_ENV
          echo "::set-output name=monitoring_public_ip::$MONITORING_PUBLIC_IP"    

  build-spring:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          path: ticket-server

      - name: JDK 17 설치
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Gradle 빌드
        run: ./gradlew build
        working-directory: ticket-server

      - name: Docker 이미지 빌드
        run: docker build -t boosterko/ticket-app:latest .
        working-directory: ticket-server

      - name: Docker Hub 로그인
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Docker Hub 이미지 푸시
        run: docker push boosterko/ticket-app:latest # 나중에 {tagname}

  deploy-spring:
    runs-on: ubuntu-latest
    needs: build-spring

    steps:
      - name: 티켓 서버 EC2에 배포
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ steps.ticket-server-ec2-info.outputs.ticket_server_public_ip }}
          username: ${{ secrets.SPRING_EC2_USER }}
          key: ${{ secrets.SPRING_EC2_SSH_KEY }}
          port: 22
          script: |
            docker pull boosterko/ticket-app:latest
            docker stop ticket-app || true
            docker rm ticket-app || true
            docker run -d -p 8080:8080 --name ticket-app \
              -e DB_URL=${{ secrets.DB_URL }} \
              -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              boosterko/ticket-app:latest

  build-monitoring:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          path: monitoring

      - name: 모니터링 서버 Docker 이미지 빌드
        run: docker-compose build
        working-directory: monitoring

  deploy-monitoring:
    runs-on: ubuntu-latest
    needs: build-monitoring

    steps:
      - name: 모니터링 서버 EC2에 배포
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ steps.monitoring-server-ec2-info.outputs.monitoring_public_ip }}
          username: ${{ secrets.SPRING_EC2_USER }}
          key: ${{ secrets.SPRING_EC2_SSH_KEY }}
          port: 22
          script: |
            cd monitoring
            export GRAFANA_PASSWORD=${{ secrets.GRAFANA_PASSWORD }}
            export SLACK_API_URL=${{ secrets.SLACK_API_URL }}
            docker-compose pull
            docker-compose down
            docker-compose up -D
        working-directory: monitoring
